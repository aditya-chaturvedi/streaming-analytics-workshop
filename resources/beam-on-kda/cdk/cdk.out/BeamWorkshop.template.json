{
  "Description": "Creates all resources and compiles all artifacts that are required to run the beam workshop (shausma-beam-workshop-self-paced-2020-07-08)",
  "Resources": {
    "Bucket83908E77": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Bucket/Resource"
      }
    },
    "EmptyBucketEmptyBucketLambdaServiceRole67452BDD": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/EmptyBucket/EmptyBucketLambda/ServiceRole/Resource"
      }
    },
    "EmptyBucketEmptyBucketLambdaServiceRoleDefaultPolicy0872AADF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "EmptyBucketEmptyBucketLambdaServiceRoleDefaultPolicy0872AADF",
        "Roles": [
          {
            "Ref": "EmptyBucketEmptyBucketLambdaServiceRole67452BDD"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/EmptyBucket/EmptyBucketLambda/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "EmptyBucketEmptyBucketLambdaD0E9E93D": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import os\nimport json\nimport boto3\nimport traceback\nimport cfnresponse\n\ndef empty_bucket(event, context):\n    bucket_name = os.environ['bucket_name']\n\n    try:\n        if event['RequestType'] == 'Delete':\n            print(\"empty bucket: \" + bucket_name)\n            \n            bucket = boto3.resource('s3').Bucket(bucket_name)\n            bucket.object_versions.delete()\n\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n    except Exception:\n        traceback.print_exc()\n\n        cfnresponse.send(event, context, cfnresponse.FAILED, {})"
        },
        "Handler": "index.empty_bucket",
        "Role": {
          "Fn::GetAtt": [
            "EmptyBucketEmptyBucketLambdaServiceRole67452BDD",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Environment": {
          "Variables": {
            "bucket_name": {
              "Ref": "Bucket83908E77"
            }
          }
        },
        "MemorySize": 512,
        "Timeout": 900
      },
      "DependsOn": [
        "EmptyBucketEmptyBucketLambdaServiceRoleDefaultPolicy0872AADF",
        "EmptyBucketEmptyBucketLambdaServiceRole67452BDD"
      ],
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/EmptyBucket/EmptyBucketLambda/Resource"
      }
    },
    "EmptyBucketEmptyBucketResource78AC492E": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "EmptyBucketEmptyBucketLambdaD0E9E93D",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/EmptyBucket/EmptyBucketResource"
      }
    },
    "KinesisReplayBuildPipelineDownloadLambdaServiceRoleB714F0C6": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/DownloadLambda/ServiceRole/Resource"
      }
    },
    "KinesisReplayBuildPipelineDownloadLambdaServiceRoleDefaultPolicyBF6DD429": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:PutObject*",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "Bucket83908E77",
                        "Arn"
                      ]
                    },
                    "/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "KinesisReplayBuildPipelineDownloadLambdaServiceRoleDefaultPolicyBF6DD429",
        "Roles": [
          {
            "Ref": "KinesisReplayBuildPipelineDownloadLambdaServiceRoleB714F0C6"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/DownloadLambda/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "KinesisReplayBuildPipelineDownloadLambda3BF1DB4C": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import os\nimport json\nimport boto3\nimport traceback\nimport cfnresponse\nimport urllib.request\n\ns3client = boto3.client('s3')\ncode_pipeline = boto3.client('codepipeline')\n\n\ndef download_sources(event, context):\n    url = os.environ['url']\n    bucket = os.environ['bucket']\n    key = os.environ['key']\n\n    try:\n        if event['RequestType'] != 'Delete':\n            req = urllib.request.Request(url)\n            response = urllib.request.urlopen(req)\n\n            s3client.put_object(Bucket=bucket, Key=key, Body=response.read())\n\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n    except Exception:\n        traceback.print_exc()\n\n        cfnresponse.send(event, context, cfnresponse.FAILED, {})\n\n\ndef notify_build_success(event, context):\n    job_id = event['CodePipeline.job']['id']\n\n    url = os.environ['waitHandleUrl']\n    headers = { \"Content-Type\": \"\" }\n    data = { \"Status\": \"SUCCESS\", \"Reason\": \"Compilation Succeeded\", \"UniqueId\": job_id, \"Data\": \"Compilation Succeeded\" }\n\n    try:\n        req = urllib.request.Request(url, headers=headers, data=bytes(json.dumps(data), encoding=\"utf-8\"), method='PUT')\n        response = urllib.request.urlopen(req)\n\n        code_pipeline.put_job_success_result(jobId=job_id)\n    except Exception:\n        traceback.print_exc()\n\n        code_pipeline.put_job_failure_result(jobId=job_id, failureDetails={'type': 'JobFailed'})\n"
        },
        "Handler": "index.download_sources",
        "Role": {
          "Fn::GetAtt": [
            "KinesisReplayBuildPipelineDownloadLambdaServiceRoleB714F0C6",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Environment": {
          "Variables": {
            "url": "https://github.com/aws-samples/amazon-kinesis-replay/archive/release-0.1.0.zip",
            "bucket": {
              "Ref": "Bucket83908E77"
            },
            "key": "sources/amazon-kinesis-replay-release-0.1.0.zip"
          }
        },
        "Timeout": 30
      },
      "DependsOn": [
        "KinesisReplayBuildPipelineDownloadLambdaServiceRoleDefaultPolicyBF6DD429",
        "KinesisReplayBuildPipelineDownloadLambdaServiceRoleB714F0C6"
      ],
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/DownloadLambda/Resource"
      }
    },
    "KinesisReplayBuildPipelineDownloadLambdaResource381B544B": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "KinesisReplayBuildPipelineDownloadLambda3BF1DB4C",
            "Arn"
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/DownloadLambdaResource/Default"
      }
    },
    "KinesisReplayBuildPipelineCodebuildProjectRole088416D9": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodebuildProject/Role/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodebuildProjectRoleDefaultPolicy88D54FBA": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:eu-west-1:399220903411:log-group:/aws/codebuild/",
                      {
                        "Ref": "KinesisReplayBuildPipelineCodebuildProject39AB80D2"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":logs:eu-west-1:399220903411:log-group:/aws/codebuild/",
                      {
                        "Ref": "KinesisReplayBuildPipelineCodebuildProject39AB80D2"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":codebuild:eu-west-1:399220903411:report-group/",
                    {
                      "Ref": "KinesisReplayBuildPipelineCodebuildProject39AB80D2"
                    },
                    "-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "KinesisReplayBuildPipelineCodebuildProjectRoleDefaultPolicy88D54FBA",
        "Roles": [
          {
            "Ref": "KinesisReplayBuildPipelineCodebuildProjectRole088416D9"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodebuildProject/Role/DefaultPolicy/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodebuildProject39AB80D2": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/java:openjdk-11",
          "PrivilegedMode": false,
          "Type": "LINUX_CONTAINER"
        },
        "ServiceRole": {
          "Fn::GetAtt": [
            "KinesisReplayBuildPipelineCodebuildProjectRole088416D9",
            "Arn"
          ]
        },
        "Source": {
          "BuildSpec": "{\n  \"version\": \"0.2\",\n  \"phases\": {\n    \"build\": {\n      \"commands\": [\n        \"cd amazon-kinesis-replay-release-0.1.0\",\n        \"mvn clean package -B\"\n      ]\n    }\n  },\n  \"artifacts\": {\n    \"files\": [\n      \"target/amazon-kinesis-replay-*.jar\"\n    ],\n    \"discard-paths\": false,\n    \"base-directory\": \"amazon-kinesis-replay-release-0.1.0\"\n  }\n}",
          "Type": "CODEPIPELINE"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodebuildProject/Resource"
      }
    },
    "KinesisReplayBuildPipelineWaitHandle670CA7B8": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/WaitHandle"
      }
    },
    "KinesisReplayBuildPipelineWaitCondition04932765": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Count": 1,
        "Handle": {
          "Ref": "KinesisReplayBuildPipelineWaitHandle670CA7B8"
        },
        "Timeout": "1200"
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/WaitCondition"
      }
    },
    "KinesisReplayBuildPipelineNotifyLambdaServiceRoleA6F8FBD8": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/NotifyLambda/ServiceRole/Resource"
      }
    },
    "KinesisReplayBuildPipelineNotifyLambdaServiceRoleDefaultPolicy6B2E66BF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "codepipeline:PutJobSuccessResult",
                "codepipeline:PutJobFailureResult"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "KinesisReplayBuildPipelineNotifyLambdaServiceRoleDefaultPolicy6B2E66BF",
        "Roles": [
          {
            "Ref": "KinesisReplayBuildPipelineNotifyLambdaServiceRoleA6F8FBD8"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/NotifyLambda/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "KinesisReplayBuildPipelineNotifyLambda8B0DA1ED": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import os\nimport json\nimport boto3\nimport traceback\nimport cfnresponse\nimport urllib.request\n\ns3client = boto3.client('s3')\ncode_pipeline = boto3.client('codepipeline')\n\n\ndef download_sources(event, context):\n    url = os.environ['url']\n    bucket = os.environ['bucket']\n    key = os.environ['key']\n\n    try:\n        if event['RequestType'] != 'Delete':\n            req = urllib.request.Request(url)\n            response = urllib.request.urlopen(req)\n\n            s3client.put_object(Bucket=bucket, Key=key, Body=response.read())\n\n        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n    except Exception:\n        traceback.print_exc()\n\n        cfnresponse.send(event, context, cfnresponse.FAILED, {})\n\n\ndef notify_build_success(event, context):\n    job_id = event['CodePipeline.job']['id']\n\n    url = os.environ['waitHandleUrl']\n    headers = { \"Content-Type\": \"\" }\n    data = { \"Status\": \"SUCCESS\", \"Reason\": \"Compilation Succeeded\", \"UniqueId\": job_id, \"Data\": \"Compilation Succeeded\" }\n\n    try:\n        req = urllib.request.Request(url, headers=headers, data=bytes(json.dumps(data), encoding=\"utf-8\"), method='PUT')\n        response = urllib.request.urlopen(req)\n\n        code_pipeline.put_job_success_result(jobId=job_id)\n    except Exception:\n        traceback.print_exc()\n\n        code_pipeline.put_job_failure_result(jobId=job_id, failureDetails={'type': 'JobFailed'})\n"
        },
        "Handler": "index.notify_build_success",
        "Role": {
          "Fn::GetAtt": [
            "KinesisReplayBuildPipelineNotifyLambdaServiceRoleA6F8FBD8",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Environment": {
          "Variables": {
            "waitHandleUrl": {
              "Ref": "KinesisReplayBuildPipelineWaitHandle670CA7B8"
            }
          }
        },
        "Timeout": 10
      },
      "DependsOn": [
        "KinesisReplayBuildPipelineNotifyLambdaServiceRoleDefaultPolicy6B2E66BF",
        "KinesisReplayBuildPipelineNotifyLambdaServiceRoleA6F8FBD8"
      ],
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/NotifyLambda/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodePipelineRole5917B240": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "codepipeline.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodePipeline/Role/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodePipelineRoleDefaultPolicy2BA178C3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "KinesisReplayBuildPipelineCodePipelineSourceSourceActionCodePipelineActionRoleA94E5F05",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "KinesisReplayBuildPipelineCodePipelineBuildBuildActionCodePipelineActionRole203FC21A",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "KinesisReplayBuildPipelineCodePipelineCopyCopyActionCodePipelineActionRole6B9DFD07",
                  "Arn"
                ]
              }
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "KinesisReplayBuildPipelineCodePipelineCopyInvokeActionCodePipelineActionRoleEDB049EF",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "KinesisReplayBuildPipelineCodePipelineRoleDefaultPolicy2BA178C3",
        "Roles": [
          {
            "Ref": "KinesisReplayBuildPipelineCodePipelineRole5917B240"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodePipeline/Role/DefaultPolicy/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodePipeline6A859BDA": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Properties": {
        "RoleArn": {
          "Fn::GetAtt": [
            "KinesisReplayBuildPipelineCodePipelineRole5917B240",
            "Arn"
          ]
        },
        "Stages": [
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Provider": "S3",
                  "Version": "1"
                },
                "Configuration": {
                  "S3Bucket": {
                    "Ref": "Bucket83908E77"
                  },
                  "S3ObjectKey": "sources/amazon-kinesis-replay-release-0.1.0.zip"
                },
                "Name": "SourceAction",
                "OutputArtifacts": [
                  {
                    "Name": "Artifact_Source_SourceAction"
                  }
                ],
                "RoleArn": {
                  "Fn::GetAtt": [
                    "KinesisReplayBuildPipelineCodePipelineSourceSourceActionCodePipelineActionRoleA94E5F05",
                    "Arn"
                  ]
                },
                "RunOrder": 1
              }
            ],
            "Name": "Source"
          },
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1"
                },
                "Configuration": {
                  "ProjectName": {
                    "Ref": "KinesisReplayBuildPipelineCodebuildProject39AB80D2"
                  }
                },
                "InputArtifacts": [
                  {
                    "Name": "Artifact_Source_SourceAction"
                  }
                ],
                "Name": "BuildAction",
                "OutputArtifacts": [
                  {
                    "Name": "Artifact_Build_BuildAction"
                  }
                ],
                "RoleArn": {
                  "Fn::GetAtt": [
                    "KinesisReplayBuildPipelineCodePipelineBuildBuildActionCodePipelineActionRole203FC21A",
                    "Arn"
                  ]
                },
                "RunOrder": 1
              }
            ],
            "Name": "Build"
          },
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Provider": "S3",
                  "Version": "1"
                },
                "Configuration": {
                  "BucketName": {
                    "Ref": "Bucket83908E77"
                  },
                  "Extract": "true"
                },
                "InputArtifacts": [
                  {
                    "Name": "Artifact_Build_BuildAction"
                  }
                ],
                "Name": "CopyAction",
                "RoleArn": {
                  "Fn::GetAtt": [
                    "KinesisReplayBuildPipelineCodePipelineCopyCopyActionCodePipelineActionRole6B9DFD07",
                    "Arn"
                  ]
                },
                "RunOrder": 1
              },
              {
                "ActionTypeId": {
                  "Category": "Invoke",
                  "Owner": "AWS",
                  "Provider": "Lambda",
                  "Version": "1"
                },
                "Configuration": {
                  "FunctionName": {
                    "Ref": "KinesisReplayBuildPipelineNotifyLambda8B0DA1ED"
                  }
                },
                "Name": "InvokeAction",
                "RoleArn": {
                  "Fn::GetAtt": [
                    "KinesisReplayBuildPipelineCodePipelineCopyInvokeActionCodePipelineActionRoleEDB049EF",
                    "Arn"
                  ]
                },
                "RunOrder": 2
              }
            ],
            "Name": "Copy"
          }
        ],
        "ArtifactStore": {
          "Location": {
            "Ref": "Bucket83908E77"
          },
          "Type": "S3"
        }
      },
      "DependsOn": [
        "KinesisReplayBuildPipelineCodePipelineRoleDefaultPolicy2BA178C3",
        "KinesisReplayBuildPipelineCodePipelineRole5917B240"
      ],
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodePipeline/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodePipelineSourceSourceActionCodePipelineActionRoleA94E5F05": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::399220903411:root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodePipeline/Source/SourceAction/CodePipelineActionRole/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodePipelineSourceSourceActionCodePipelineActionRoleDefaultPolicy334675EB": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "KinesisReplayBuildPipelineCodePipelineSourceSourceActionCodePipelineActionRoleDefaultPolicy334675EB",
        "Roles": [
          {
            "Ref": "KinesisReplayBuildPipelineCodePipelineSourceSourceActionCodePipelineActionRoleA94E5F05"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodePipeline/Source/SourceAction/CodePipelineActionRole/DefaultPolicy/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodePipelineBuildBuildActionCodePipelineActionRole203FC21A": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::399220903411:root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodePipeline/Build/BuildAction/CodePipelineActionRole/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodePipelineBuildBuildActionCodePipelineActionRoleDefaultPolicy7DBFA69D": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "KinesisReplayBuildPipelineCodebuildProject39AB80D2",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "KinesisReplayBuildPipelineCodePipelineBuildBuildActionCodePipelineActionRoleDefaultPolicy7DBFA69D",
        "Roles": [
          {
            "Ref": "KinesisReplayBuildPipelineCodePipelineBuildBuildActionCodePipelineActionRole203FC21A"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodePipeline/Build/BuildAction/CodePipelineActionRole/DefaultPolicy/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodePipelineCopyCopyActionCodePipelineActionRole6B9DFD07": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::399220903411:root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodePipeline/Copy/CopyAction/CodePipelineActionRole/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodePipelineCopyCopyActionCodePipelineActionRoleDefaultPolicyD2AE2A89": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "KinesisReplayBuildPipelineCodePipelineCopyCopyActionCodePipelineActionRoleDefaultPolicyD2AE2A89",
        "Roles": [
          {
            "Ref": "KinesisReplayBuildPipelineCodePipelineCopyCopyActionCodePipelineActionRole6B9DFD07"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodePipeline/Copy/CopyAction/CodePipelineActionRole/DefaultPolicy/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodePipelineCopyInvokeActionCodePipelineActionRoleEDB049EF": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::399220903411:root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodePipeline/Copy/InvokeAction/CodePipelineActionRole/Resource"
      }
    },
    "KinesisReplayBuildPipelineCodePipelineCopyInvokeActionCodePipelineActionRoleDefaultPolicy8EF812D1": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:ListFunctions",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "KinesisReplayBuildPipelineNotifyLambda8B0DA1ED",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "KinesisReplayBuildPipelineCodePipelineCopyInvokeActionCodePipelineActionRoleDefaultPolicy8EF812D1",
        "Roles": [
          {
            "Ref": "KinesisReplayBuildPipelineCodePipelineCopyInvokeActionCodePipelineActionRoleEDB049EF"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KinesisReplayBuildPipeline/CodePipeline/Copy/InvokeAction/CodePipelineActionRole/DefaultPolicy/Resource"
      }
    },
    "TemplatedSecret3D98B577": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "GenerateSecretString": {
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "IncludeSpace": false,
          "PasswordLength": 16,
          "SecretStringTemplate": "{\"username\":\"Administrator\"}"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/TemplatedSecret/Resource"
      }
    },
    "InstanceEip": {
      "Type": "AWS::EC2::EIP",
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/InstanceEip"
      }
    },
    "Vpc8378EB38": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "BeamWorkshop/Vpc"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/Resource"
      }
    },
    "VpcpublicSubnet1Subnet2BB74ED7": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/18",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "eu-west-1a",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "BeamWorkshop/Vpc/publicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/publicSubnet1/Subnet"
      }
    },
    "VpcpublicSubnet1RouteTable15C15F8E": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "BeamWorkshop/Vpc/publicSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/publicSubnet1/RouteTable"
      }
    },
    "VpcpublicSubnet1RouteTableAssociation4E83B6E4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcpublicSubnet1RouteTable15C15F8E"
        },
        "SubnetId": {
          "Ref": "VpcpublicSubnet1Subnet2BB74ED7"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/publicSubnet1/RouteTableAssociation"
      }
    },
    "VpcpublicSubnet1DefaultRouteB88F9E93": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcpublicSubnet1RouteTable15C15F8E"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "DependsOn": [
        "VpcVPCGWBF912B6E"
      ],
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/publicSubnet1/DefaultRoute"
      }
    },
    "VpcpublicSubnet2SubnetE34B022A": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.64.0/18",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "eu-west-1b",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "BeamWorkshop/Vpc/publicSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/publicSubnet2/Subnet"
      }
    },
    "VpcpublicSubnet2RouteTableC5A6DF77": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "BeamWorkshop/Vpc/publicSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/publicSubnet2/RouteTable"
      }
    },
    "VpcpublicSubnet2RouteTableAssociationCCE257FF": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcpublicSubnet2RouteTableC5A6DF77"
        },
        "SubnetId": {
          "Ref": "VpcpublicSubnet2SubnetE34B022A"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/publicSubnet2/RouteTableAssociation"
      }
    },
    "VpcpublicSubnet2DefaultRoute732F0BEB": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcpublicSubnet2RouteTableC5A6DF77"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "DependsOn": [
        "VpcVPCGWBF912B6E"
      ],
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/publicSubnet2/DefaultRoute"
      }
    },
    "VpcpublicSubnet3SubnetDFEF064A": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.128.0/18",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": "eu-west-1c",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "BeamWorkshop/Vpc/publicSubnet3"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/publicSubnet3/Subnet"
      }
    },
    "VpcpublicSubnet3RouteTable80517A9C": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "BeamWorkshop/Vpc/publicSubnet3"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/publicSubnet3/RouteTable"
      }
    },
    "VpcpublicSubnet3RouteTableAssociation61C43F88": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcpublicSubnet3RouteTable80517A9C"
        },
        "SubnetId": {
          "Ref": "VpcpublicSubnet3SubnetDFEF064A"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/publicSubnet3/RouteTableAssociation"
      }
    },
    "VpcpublicSubnet3DefaultRouteA3904BF0": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcpublicSubnet3RouteTable80517A9C"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "DependsOn": [
        "VpcVPCGWBF912B6E"
      ],
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/publicSubnet3/DefaultRoute"
      }
    },
    "VpcIGWD7BA715C": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "BeamWorkshop/Vpc"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/IGW"
      }
    },
    "VpcVPCGWBF912B6E": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "InternetGatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/Vpc/VPCGW"
      }
    },
    "SecurityGroupDD263621": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "BeamWorkshop/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:3389",
            "FromPort": 3389,
            "IpProtocol": "tcp",
            "ToPort": 3389
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/SecurityGroup/Resource"
      }
    },
    "InstanceRole3CCE2F1D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonSSMManagedInstanceCore"
              ]
            ]
          }
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "secretsmanager:GetSecretValue",
                  "Effect": "Allow",
                  "Resource": {
                    "Ref": "TemplatedSecret3D98B577"
                  }
                },
                {
                  "Action": [
                    "ec2:AssociateAddress",
                    "cloudwatch:PutMetricData",
                    "logs:Describe*",
                    "logs:PutLogEvents",
                    "kinesis:DescribeStream",
                    "kinesis:ListShards",
                    "kinesis:GetShardIterator",
                    "kinesis:GetRecords",
                    "kinesis:PutRecord",
                    "kinesis:PutRecords",
                    "kinesisanalytics:StartApplication"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "cloudformation:DescribeStacks",
                  "Effect": "Allow",
                  "Resource": {
                    "Ref": "AWS::StackId"
                  }
                },
                {
                  "Action": [
                    "s3:GetObject*",
                    "s3:GetBucket*",
                    "s3:List*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "Bucket83908E77",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "Bucket83908E77",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":s3:::aws-bigdata-blog"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":s3:::aws-bigdata-blog/*"
                        ]
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "WorkshopPermissions"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/InstanceRole/Resource"
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "InstanceRole3CCE2F1D"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/InstanceProfile"
      }
    },
    "InstanceWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/InstanceWaitHandle"
      }
    },
    "InstanceBootstrapWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Count": 1,
        "Handle": {
          "Ref": "InstanceWaitHandle"
        },
        "Timeout": "1200"
      },
      "DependsOn": [
        "LaunchTemplate"
      ],
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/InstanceBootstrapWaitCondition"
      }
    },
    "LaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": [
                "InstanceProfile",
                "Arn"
              ]
            }
          },
          "ImageId": {
            "Ref": "SsmParameterValueawsserviceamiwindowslatestWindowsServer2019EnglishFullBaseC96584B6F00A464EAD1953AFF4B05118Parameter"
          },
          "NetworkInterfaces": [
            {
              "AssociatePublicIpAddress": true,
              "DeleteOnTermination": true,
              "DeviceIndex": 0,
              "Groups": [
                {
                  "Fn::GetAtt": [
                    "SecurityGroupDD263621",
                    "GroupId"
                  ]
                }
              ]
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "<powershell>            \nImport-Module AWSPowerShell\n\n# Install choco\niex ((New-Object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\n\n# Add gitter and retry to install commands\n$iter = 0\n$sleep = 5\n\nDo {\nStart-Sleep -Seconds (Get-Random -Maximum ($sleep*[Math]::Pow(2,$iter++)))\nchoco install git --no-progress -y\n} Until ($LASTEXITCODE -eq 0)\n\nDo {\nStart-Sleep -Seconds (Get-Random -Maximum ($sleep*[Math]::Pow(2,$iter++)))\nchoco install firefox --no-progress -y\n} Until ($LASTEXITCODE -eq 0)\n\nDo {\nStart-Sleep -Seconds (Get-Random -Maximum ($sleep*[Math]::Pow(2,$iter++)))\nchoco install intellijidea-community --no-progress --version 2020.1.2 -y\n} Until ($LASTEXITCODE -eq 0)\n\n# Add IntelliJ Java 11 to the path\n$PATH = [Environment]::GetEnvironmentVariable(\"PATH\", \"Machine\")\n$intellij_path = \"C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2020.1.2\\jbr\\bin\"\n[Environment]::SetEnvironmentVariable(\"PATH\", \"$PATH;$intellij_path\", \"Machine\")\n\n$desktop = \"C:\\Users\\Administrator\\Desktop\"\n\n# Create desktop shortcuts\n# Remove-Item -path \"$desktop\\*.website\"\n# Copy-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\JetBrains\\*.lnk\" \"$desktop\"\n\n# Change password\n$password = ((Get-SECSecretValue -SecretId '",
                  {
                    "Ref": "TemplatedSecret3D98B577"
                  },
                  "').SecretString | ConvertFrom-Json).Password\nnet.exe user Administrator \"$password\"\n\n# Associate EIP\n$instanceId = Invoke-RestMethod -uri http://169.254.169.254/latest/meta-data/instance-id\nRegister-EC2Address -InstanceId \"$instanceId\" -AllocationId \"",
                  {
                    "Fn::GetAtt": [
                      "InstanceEip",
                      "AllocationId"
                    ]
                  },
                  "\"\n\n# Signal success to CFN\ncfn-signal.exe --success true --region \"",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\" \"",
                  {
                    "Ref": "InstanceWaitHandle"
                  },
                  "\"\n\n\n# Download artifacts\nNew-Item -Path \"$desktop\" -Name \"workshop-resources\" -ItemType \"directory\"\n\n# $url = \"https://raw.githubusercontent.com/aws-samples/amazon-kinesis-analytics-taxi-consumer/.../misc/streaming-analytics-workshop-dashboard.json\"\n# $file = \"$desktop\\workshop-resources\\streaming-analytics-workshop-dashboard.json\"\n# (New-Object System.Net.WebClient).DownloadFile($url, $file)\n\n# Wait until build pipelines have successfully build all artifacts\nWait-CFNStack -StackName \"",
                  {
                    "Ref": "AWS::StackName"
                  },
                  "\" -Timeout 1800\n\nCopy-S3Object -BucketName \"",
                  {
                    "Ref": "Bucket83908E77"
                  },
                  "\" -KeyPrefix target -LocalFolder \"$desktop\\workshop-resources\"\n\n# Expand-Archive \"$desktop\\workshop-resources\\flink-connector-kinesis*.zip\" \"$desktop\\workshop-resources\"\n</powershell>"
                ]
              ]
            }
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/LaunchTemplate"
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MaxSize": "1",
        "MinSize": "1",
        "DesiredCapacity": "1",
        "MixedInstancesPolicy": {
          "InstancesDistribution": {
            "OnDemandBaseCapacity": 1
          },
          "LaunchTemplate": {
            "LaunchTemplateSpecification": {
              "LaunchTemplateId": {
                "Ref": "LaunchTemplate"
              },
              "Version": {
                "Fn::GetAtt": [
                  "LaunchTemplate",
                  "DefaultVersionNumber"
                ]
              }
            },
            "Overrides": [
              {
                "InstanceType": "m5.2xlarge"
              },
              {
                "InstanceType": "c5.2xlarge"
              },
              {
                "InstanceType": "m3.2xlarge"
              },
              {
                "InstanceType": "m5.xlarge"
              },
              {
                "InstanceType": "c5.xlarge"
              },
              {
                "InstanceType": "m4.xlarge"
              },
              {
                "InstanceType": "c4.xlarge"
              }
            ]
          }
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "VpcpublicSubnet1Subnet2BB74ED7"
          },
          {
            "Ref": "VpcpublicSubnet2SubnetE34B022A"
          },
          {
            "Ref": "VpcpublicSubnet3SubnetDFEF064A"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/AutoScalingGroup"
      }
    },
    "KdaRoleB7DD543E": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "kinesisanalytics.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KdaRole/Resource"
      }
    },
    "KdaRoleDefaultPolicy88A47211": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:Describe*",
                "logs:PutLogEvents",
                "kinesis:List*",
                "kinesis:Describe*",
                "kinesis:Get*",
                "kinesis:SubscribeToShard"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "KdaRoleDefaultPolicy88A47211",
        "Roles": [
          {
            "Ref": "KdaRoleB7DD543E"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BeamWorkshop/KdaRole/DefaultPolicy/Resource"
      }
    }
  },
  "Parameters": {
    "SsmParameterValueawsserviceamiwindowslatestWindowsServer2019EnglishFullBaseC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base"
    }
  },
  "Outputs": {
    "InstanceIp": {
      "Value": {
        "Ref": "InstanceEip"
      }
    },
    "InstanceLoginCredentials": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/secretsmanager/#/secret?name=",
            {
              "Ref": "TemplatedSecret3D98B577"
            }
          ]
        ]
      }
    },
    "KinesisAnalyticsServiceRole": {
      "Value": {
        "Ref": "KdaRoleB7DD543E"
      }
    },
    "FlinkApplicationJarBucket": {
      "Value": {
        "Ref": "Bucket83908E77"
      }
    }
  }
}